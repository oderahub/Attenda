{
  "address": "0xE91AA75e176df9a14860B5fe1d308961fAbd10e2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_attendaToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "ProofRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ProofSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ProofValidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "ValidationCriteriaUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "addValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attendaToken",
      "outputs": [
        {
          "internalType": "contract AttendaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaignProofs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaignValidationCriteria",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minWatchDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWatchDuration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "requireInteraction",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "requireScrollDepth",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minScrollDepth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "getCampaignProofs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        }
      ],
      "name": "getProof",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "campaignId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "watchDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "ipfsProofHash",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isValidated",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRewarded",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProofOfAttention.AttentionProof",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        }
      ],
      "name": "getProofValidationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "getValidationCriteria",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minWatchDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxWatchDuration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "requireInteraction",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "requireScrollDepth",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "minScrollDepth",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProofOfAttention.ValidationCriteria",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserSubmittedProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "isProofValidatedBy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proofValidationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proofValidations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "watchDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsProofHash",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isValidated",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRewarded",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "removeValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minWatchDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxWatchDuration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "requireInteraction",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "requireScrollDepth",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minScrollDepth",
          "type": "uint256"
        }
      ],
      "name": "setValidationCriteria",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "watchDuration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "ipfsProofHash",
          "type": "string"
        }
      ],
      "name": "submitProof",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateValidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userProofSubmitted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        }
      ],
      "name": "validateProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fcec433215856eedd6909c97c8fe6c6e15970a9a6c04bf4f7c9af753af70130",
  "receipt": {
    "to": null,
    "from": "0x0bA50b9001b2ECcd3869CC73c07031dca1e11412",
    "contractAddress": "0xE91AA75e176df9a14860B5fe1d308961fAbd10e2",
    "transactionIndex": 1,
    "gasUsed": "1838748",
    "logsBloom": "0x
    "blockHash": "0xb486d74ffc1931cc7986584542f5cca4e51826fd1681e9700c2f22349ca3ac7e",
    "transactionHash": "0x9fcec433215856eedd6909c97c8fe6c6e15970a9a6c04bf4f7c9af753af70130",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25663266,
        "transactionHash": "0x9fcec433215856eedd6909c97c8fe6c6e15970a9a6c04bf4f7c9af753af70130",
        "address": "0xE91AA75e176df9a14860B5fe1d308961fAbd10e2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000ba50b9001b2eccd3869cc73c07031dca1e11412"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb486d74ffc1931cc7986584542f5cca4e51826fd1681e9700c2f22349ca3ac7e"
      }
    ],
    "blockNumber": 25663266,
    "cumulativeGasUsed": "1884880",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46DDcC4C6A8C07d7Ef42927bA95396514CBbaD5D"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ffa934390fd75ae03c7e2ad00299cfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_attendaToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ProofRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ProofSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ProofValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"ValidationCriteriaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attendaToken\",\"outputs\":[{\"internalType\":\"contract AttendaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignProofs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignValidationCriteria\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minWatchDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWatchDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"requireInteraction\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requireScrollDepth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minScrollDepth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaignProofs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"getProof\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"watchDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsProofHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRewarded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ProofOfAttention.AttentionProof\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"getProofValidationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getValidationCriteria\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minWatchDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWatchDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"requireInteraction\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requireScrollDepth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minScrollDepth\",\"type\":\"uint256\"}],\"internalType\":\"struct ProofOfAttention.ValidationCriteria\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserSubmittedProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isProofValidatedBy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proofValidationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proofValidations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"watchDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsProofHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRewarded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minWatchDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWatchDuration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"requireInteraction\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"requireScrollDepth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minScrollDepth\",\"type\":\"uint256\"}],\"name\":\"setValidationCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"watchDuration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"ipfsProofHash\",\"type\":\"string\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"updateValidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userProofSubmitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"validateProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Handles verification and validation of user attention to advertisements\",\"kind\":\"dev\",\"methods\":{\"addValidator(address)\":{\"details\":\"Add a new validator\"},\"distributeReward(uint256)\":{\"details\":\"Distribute rewards for validated proofs\"},\"emergencyPause()\":{\"details\":\"Emergency pause for all validations (only owner)\"},\"getCampaignProofs(uint256)\":{\"details\":\"Get campaign proofs\"},\"getProof(uint256)\":{\"details\":\"Get proof details\"},\"getProofValidationCount(uint256)\":{\"details\":\"Get proof validation count\"},\"getTotalProofs()\":{\"details\":\"Get total proofs count\"},\"getValidationCriteria(uint256)\":{\"details\":\"Get validation criteria for a campaign\"},\"hasUserSubmittedProof(uint256,address)\":{\"details\":\"Check if user has submitted proof for campaign\"},\"isProofValidatedBy(uint256,address)\":{\"details\":\"Check if proof is validated by specific validator\"},\"isValidator(address)\":{\"details\":\"Check if address is validator\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeValidator(address)\":{\"details\":\"Remove a validator\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setValidationCriteria(uint256,uint256,uint256,bool,bool,uint256)\":{\"details\":\"Set validation criteria for a campaign\"},\"submitProof(uint256,uint256,string)\":{\"details\":\"Submit proof of attention for a campaign\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateValidationThreshold(uint256)\":{\"details\":\"Update validation threshold\"},\"validateProof(uint256)\":{\"details\":\"Validate a proof of attention (only validators)\"}},\"title\":\"ProofOfAttention\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProofOfAttention.sol\":\"ProofOfAttention\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/AttendaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AttendaToken\\n * @dev ERC20 token for the Attenda MVP system\\n * This token will be used for rewards and payments in the attention economy\\n */\\ncontract AttendaToken is ERC20, Ownable {\\n    uint256 public constant INITIAL_SUPPLY = 1_000_000 * 10**18; // 1 million tokens\\n    uint256 public constant MAX_TEST_MINT = 1000 * 10**18; // 1000 tokens max for testing\\n    \\n    constructor() ERC20(\\\"Attenda Token\\\", \\\"ATT\\\") Ownable() {\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n    \\n    /**\\n     * @dev Mint new tokens (only owner)\\n     * @param to Address to mint tokens to\\n     * @param amount Amount of tokens to mint\\n     */\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n    \\n    /**\\n     * @dev Public minting for testing purposes (anyone can call)\\n     * @param amount Amount of tokens to mint (max 1000 for testing)\\n     */\\n    function mintForTesting(uint256 amount) public {\\n        require(amount <= MAX_TEST_MINT, \\\"Amount exceeds max test mint\\\");\\n        require(balanceOf(msg.sender) == 0, \\\"Already has tokens\\\");\\n        _mint(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev Burn tokens from caller's account\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev Burn tokens from a specific account (only owner)\\n     * @param from Address to burn tokens from\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burnFrom(address from, uint256 amount) public onlyOwner {\\n        _burn(from, amount);\\n    }\\n} \",\"keccak256\":\"0x4d152a516069a2e0b95a6e4bf2939b6fa3093dae2ed50d781dfcf4640758e40d\",\"license\":\"MIT\"},\"contracts/ProofOfAttention.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./AttendaToken.sol\\\";\\n\\n/**\\n * @title ProofOfAttention\\n * @dev Handles verification and validation of user attention to advertisements\\n */\\ncontract ProofOfAttention is Ownable, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    \\n    AttendaToken public attendaToken;\\n    \\n    struct AttentionProof {\\n        uint256 id;\\n        address user;\\n        uint256 campaignId;\\n        uint256 watchDuration;\\n        uint256 timestamp;\\n        string ipfsProofHash;\\n        bool isValidated;\\n        bool isRewarded;\\n        uint256 rewardAmount;\\n    }\\n    \\n    struct ValidationCriteria {\\n        uint256 minWatchDuration;\\n        uint256 maxWatchDuration;\\n        bool requireInteraction;\\n        bool requireScrollDepth;\\n        uint256 minScrollDepth;\\n    }\\n    \\n    Counters.Counter private _proofIds;\\n    \\n    mapping(uint256 => AttentionProof) public proofs;\\n    mapping(uint256 => ValidationCriteria) public campaignValidationCriteria;\\n    mapping(uint256 => mapping(address => bool)) public userProofSubmitted;\\n    mapping(uint256 => address[]) public campaignProofs;\\n    \\n    uint256 public validationThreshold = 3; // Number of validators required\\n    mapping(address => bool) public validators;\\n    mapping(uint256 => mapping(address => bool)) public proofValidations;\\n    mapping(uint256 => uint256) public proofValidationCount;\\n    \\n    event ProofSubmitted(uint256 indexed proofId, uint256 indexed campaignId, address indexed user);\\n    event ProofValidated(uint256 indexed proofId, address indexed validator);\\n    event ProofRejected(uint256 indexed proofId, address indexed validator, string reason);\\n    event RewardDistributed(uint256 indexed proofId, address indexed user, uint256 amount);\\n    event ValidatorAdded(address indexed validator);\\n    event ValidatorRemoved(address indexed validator);\\n    event ValidationCriteriaUpdated(uint256 indexed campaignId);\\n    \\n    modifier onlyValidator() {\\n        require(validators[msg.sender], \\\"Only validators can call this\\\");\\n        _;\\n    }\\n    \\n    modifier proofExists(uint256 proofId) {\\n        require(proofs[proofId].id != 0, \\\"Proof does not exist\\\");\\n        _;\\n    }\\n    \\n    modifier proofNotValidated(uint256 proofId) {\\n        require(!proofs[proofId].isValidated, \\\"Proof already validated\\\");\\n        _;\\n    }\\n    \\n    constructor(address _attendaToken) Ownable() {\\n        attendaToken = AttendaToken(_attendaToken);\\n        validators[msg.sender] = true; // Owner is initial validator\\n    }\\n    \\n    /**\\n     * @dev Submit proof of attention for a campaign\\n     */\\n    function submitProof(\\n        uint256 campaignId,\\n        uint256 watchDuration,\\n        string memory ipfsProofHash\\n    ) external nonReentrant returns (uint256) {\\n        require(bytes(ipfsProofHash).length > 0, \\\"IPFS proof hash cannot be empty\\\");\\n        require(watchDuration > 0, \\\"Watch duration must be greater than 0\\\");\\n        require(!userProofSubmitted[campaignId][msg.sender], \\\"Proof already submitted for this campaign\\\");\\n        \\n        // Validate against campaign criteria\\n        ValidationCriteria memory criteria = campaignValidationCriteria[campaignId];\\n        if (criteria.minWatchDuration > 0) {\\n            require(watchDuration >= criteria.minWatchDuration, \\\"Watch duration too short\\\");\\n        }\\n        if (criteria.maxWatchDuration > 0) {\\n            require(watchDuration <= criteria.maxWatchDuration, \\\"Watch duration too long\\\");\\n        }\\n        \\n        _proofIds.increment();\\n        uint256 proofId = _proofIds.current();\\n        \\n        proofs[proofId] = AttentionProof({\\n            id: proofId,\\n            user: msg.sender,\\n            campaignId: campaignId,\\n            watchDuration: watchDuration,\\n            timestamp: block.timestamp,\\n            ipfsProofHash: ipfsProofHash,\\n            isValidated: false,\\n            isRewarded: false,\\n            rewardAmount: 0\\n        });\\n        \\n        userProofSubmitted[campaignId][msg.sender] = true;\\n        campaignProofs[campaignId].push(msg.sender);\\n        \\n        emit ProofSubmitted(proofId, campaignId, msg.sender);\\n        return proofId;\\n    }\\n    \\n    /**\\n     * @dev Validate a proof of attention (only validators)\\n     */\\n    function validateProof(uint256 proofId) external onlyValidator proofExists(proofId) proofNotValidated(proofId) {\\n        require(!proofValidations[proofId][msg.sender], \\\"Already validated this proof\\\");\\n        \\n        AttentionProof storage proof = proofs[proofId];\\n        ValidationCriteria memory criteria = campaignValidationCriteria[proof.campaignId];\\n        \\n        // Basic validation logic\\n        bool isValid = true;\\n        string memory reason = \\\"\\\";\\n        \\n        if (criteria.minWatchDuration > 0 && proof.watchDuration < criteria.minWatchDuration) {\\n            isValid = false;\\n            reason = \\\"Watch duration too short\\\";\\n        }\\n        \\n        if (criteria.maxWatchDuration > 0 && proof.watchDuration > criteria.maxWatchDuration) {\\n            isValid = false;\\n            reason = \\\"Watch duration too long\\\";\\n        }\\n        \\n        // Additional validation can be added here (interaction checks, scroll depth, etc.)\\n        \\n        if (isValid) {\\n            proofValidations[proofId][msg.sender] = true;\\n            proofValidationCount[proofId]++;\\n            \\n            emit ProofValidated(proofId, msg.sender);\\n            \\n            // Check if enough validations reached\\n            if (proofValidationCount[proofId] >= validationThreshold) {\\n                proof.isValidated = true;\\n                // Calculate reward based on watch duration and campaign criteria\\n                proof.rewardAmount = calculateReward(proof.watchDuration, proof.campaignId);\\n            }\\n        } else {\\n            emit ProofRejected(proofId, msg.sender, reason);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Distribute rewards for validated proofs\\n     */\\n    function distributeReward(uint256 proofId) external nonReentrant proofExists(proofId) {\\n        AttentionProof storage proof = proofs[proofId];\\n        require(proof.isValidated, \\\"Proof must be validated first\\\");\\n        require(!proof.isRewarded, \\\"Reward already distributed\\\");\\n        require(proof.rewardAmount > 0, \\\"No reward to distribute\\\");\\n        \\n        // Transfer tokens to user\\n        require(attendaToken.transfer(proof.user, proof.rewardAmount), \\\"Reward transfer failed\\\");\\n        \\n        proof.isRewarded = true;\\n        \\n        emit RewardDistributed(proofId, proof.user, proof.rewardAmount);\\n    }\\n    \\n    /**\\n     * @dev Set validation criteria for a campaign\\n     */\\n    function setValidationCriteria(\\n        uint256 campaignId,\\n        uint256 minWatchDuration,\\n        uint256 maxWatchDuration,\\n        bool requireInteraction,\\n        bool requireScrollDepth,\\n        uint256 minScrollDepth\\n    ) external onlyOwner {\\n        campaignValidationCriteria[campaignId] = ValidationCriteria({\\n            minWatchDuration: minWatchDuration,\\n            maxWatchDuration: maxWatchDuration,\\n            requireInteraction: requireInteraction,\\n            requireScrollDepth: requireScrollDepth,\\n            minScrollDepth: minScrollDepth\\n        });\\n        \\n        emit ValidationCriteriaUpdated(campaignId);\\n    }\\n    \\n    /**\\n     * @dev Add a new validator\\n     */\\n    function addValidator(address validator) external onlyOwner {\\n        require(validator != address(0), \\\"Invalid validator address\\\");\\n        require(!validators[validator], \\\"Already a validator\\\");\\n        \\n        validators[validator] = true;\\n        emit ValidatorAdded(validator);\\n    }\\n    \\n    /**\\n     * @dev Remove a validator\\n     */\\n    function removeValidator(address validator) external onlyOwner {\\n        require(validators[validator], \\\"Not a validator\\\");\\n        require(validator != owner(), \\\"Cannot remove owner as validator\\\");\\n        \\n        validators[validator] = false;\\n        emit ValidatorRemoved(validator);\\n    }\\n    \\n    /**\\n     * @dev Update validation threshold\\n     */\\n    function updateValidationThreshold(uint256 newThreshold) external onlyOwner {\\n        require(newThreshold > 0, \\\"Threshold must be greater than 0\\\");\\n        validationThreshold = newThreshold;\\n    }\\n    \\n    /**\\n     * @dev Calculate reward based on watch duration and campaign criteria\\n     */\\n    function calculateReward(uint256 watchDuration, uint256 /* campaignId */) internal pure returns (uint256) {\\n        // Base reward calculation - can be customized per campaign\\n        uint256 baseReward = 100 * 10**18; // 100 ATT base reward\\n        \\n        // Bonus for longer watch duration (up to 2x)\\n        uint256 durationBonus = 10; // Base multiplier\\n        if (watchDuration > 300) { // 5 minutes\\n            durationBonus = 20; // 2x\\n        } else if (watchDuration > 180) { // 3 minutes\\n            durationBonus = 15; // 1.5x\\n        }\\n        \\n        return (baseReward * durationBonus) / 10;\\n    }\\n    \\n    /**\\n     * @dev Get proof details\\n     */\\n    function getProof(uint256 proofId) external view returns (AttentionProof memory) {\\n        return proofs[proofId];\\n    }\\n    \\n    /**\\n     * @dev Get validation criteria for a campaign\\n     */\\n    function getValidationCriteria(uint256 campaignId) external view returns (ValidationCriteria memory) {\\n        return campaignValidationCriteria[campaignId];\\n    }\\n    \\n    /**\\n     * @dev Get campaign proofs\\n     */\\n    function getCampaignProofs(uint256 campaignId) external view returns (address[] memory) {\\n        return campaignProofs[campaignId];\\n    }\\n    \\n    /**\\n     * @dev Check if user has submitted proof for campaign\\n     */\\n    function hasUserSubmittedProof(uint256 campaignId, address user) external view returns (bool) {\\n        return userProofSubmitted[campaignId][user];\\n    }\\n    \\n    /**\\n     * @dev Get proof validation count\\n     */\\n    function getProofValidationCount(uint256 proofId) external view returns (uint256) {\\n        return proofValidationCount[proofId];\\n    }\\n    \\n    /**\\n     * @dev Check if proof is validated by specific validator\\n     */\\n    function isProofValidatedBy(uint256 proofId, address validator) external view returns (bool) {\\n        return proofValidations[proofId][validator];\\n    }\\n    \\n    /**\\n     * @dev Get total proofs count\\n     */\\n    function getTotalProofs() external view returns (uint256) {\\n        return _proofIds.current();\\n    }\\n    \\n    /**\\n     * @dev Check if address is validator\\n     */\\n    function isValidator(address validator) external view returns (bool) {\\n        return validators[validator];\\n    }\\n    \\n    /**\\n     * @dev Emergency pause for all validations (only owner)\\n     */\\n    function emergencyPause() external onlyOwner {\\n        for (uint256 i = 1; i <= _proofIds.current(); i++) {\\n            if (proofs[i].isValidated && !proofs[i].isRewarded) {\\n                proofs[i].isValidated = false;\\n            }\\n        }\\n    }\\n} \",\"keccak256\":\"0x71c09b6de8460a4f4f242140e8d55c32bfc8aee7932ddfa303f7f29871b5abbd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Handles verification and validation of user attention to advertisements",
    "kind": "dev",
    "methods": {
      "addValidator(address)": {
        "details": "Add a new validator"
      },
      "distributeReward(uint256)": {
        "details": "Distribute rewards for validated proofs"
      },
      "emergencyPause()": {
        "details": "Emergency pause for all validations (only owner)"
      },
      "getCampaignProofs(uint256)": {
        "details": "Get campaign proofs"
      },
      "getProof(uint256)": {
        "details": "Get proof details"
      },
      "getProofValidationCount(uint256)": {
        "details": "Get proof validation count"
      },
      "getTotalProofs()": {
        "details": "Get total proofs count"
      },
      "getValidationCriteria(uint256)": {
        "details": "Get validation criteria for a campaign"
      },
      "hasUserSubmittedProof(uint256,address)": {
        "details": "Check if user has submitted proof for campaign"
      },
      "isProofValidatedBy(uint256,address)": {
        "details": "Check if proof is validated by specific validator"
      },
      "isValidator(address)": {
        "details": "Check if address is validator"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeValidator(address)": {
        "details": "Remove a validator"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setValidationCriteria(uint256,uint256,uint256,bool,bool,uint256)": {
        "details": "Set validation criteria for a campaign"
      },
      "submitProof(uint256,uint256,string)": {
        "details": "Submit proof of attention for a campaign"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateValidationThreshold(uint256)": {
        "details": "Update validation threshold"
      },
      "validateProof(uint256)": {
        "details": "Validate a proof of attention (only validators)"
      }
    },
    "title": "ProofOfAttention",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1979,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "attendaToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AttendaToken)1078"
      },
      {
        "astId": 2012,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "_proofIds",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)895_storage"
      },
      {
        "astId": 2017,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "proofs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(AttentionProof)1998_storage)"
      },
      {
        "astId": 2022,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "campaignValidationCriteria",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(ValidationCriteria)2009_storage)"
      },
      {
        "astId": 2028,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "userProofSubmitted",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2033,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "campaignProofs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2036,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "validationThreshold",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2040,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "validators",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2046,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "proofValidations",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2050,
        "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
        "label": "proofValidationCount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AttendaToken)1078": {
        "encoding": "inplace",
        "label": "contract AttendaToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(AttentionProof)1998_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProofOfAttention.AttentionProof)",
        "numberOfBytes": "32",
        "value": "t_struct(AttentionProof)1998_storage"
      },
      "t_mapping(t_uint256,t_struct(ValidationCriteria)2009_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProofOfAttention.ValidationCriteria)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidationCriteria)2009_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AttentionProof)1998_storage": {
        "encoding": "inplace",
        "label": "struct ProofOfAttention.AttentionProof",
        "members": [
          {
            "astId": 1981,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1983,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1985,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "campaignId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1987,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "watchDuration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1989,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1991,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "ipfsProofHash",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 1993,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "isValidated",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1995,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "isRewarded",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 1997,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Counter)895_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 894,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ValidationCriteria)2009_storage": {
        "encoding": "inplace",
        "label": "struct ProofOfAttention.ValidationCriteria",
        "members": [
          {
            "astId": 2000,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "minWatchDuration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2002,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "maxWatchDuration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2004,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "requireInteraction",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2006,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "requireScrollDepth",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 2008,
            "contract": "contracts/ProofOfAttention.sol:ProofOfAttention",
            "label": "minScrollDepth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}