{
  "address": "0xaeAc3Eec773c6082c9f8a866E01AA45A3B28a9bB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_attendaToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "CampaignActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "CampaignCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "advertiser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "PlatformFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ProofSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ProofVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attendaToken",
      "outputs": [
        {
          "internalType": "contract AttendaToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaignParticipants",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "campaigns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "advertiser",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCompleted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "completeCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxParticipants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "createCampaign",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        }
      ],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "getCampaign",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "advertiser",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentParticipants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCompleted",
              "type": "bool"
            }
          ],
          "internalType": "struct CampaignManager.Campaign",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        }
      ],
      "name": "getCampaignParticipants",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        }
      ],
      "name": "getProof",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "campaignId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "watchTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isVerified",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRewarded",
              "type": "bool"
            }
          ],
          "internalType": "struct CampaignManager.ProofOfAttention",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCampaigns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasUserParticipated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "watchTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isVerified",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRewarded",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "campaignId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "watchTime",
          "type": "uint256"
        }
      ],
      "name": "submitProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "updatePlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userParticipated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proofId",
          "type": "uint256"
        }
      ],
      "name": "verifyProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x89a2d57945343a2dcef1a89f6ebbb08b25726cc5427ffcf8d9cc1ff9d27cc8a4",
  "receipt": {
    "to": null,
    "from": "0x0bA50b9001b2ECcd3869CC73c07031dca1e11412",
    "contractAddress": "0xaeAc3Eec773c6082c9f8a866E01AA45A3B28a9bB",
    "transactionIndex": 1,
    "gasUsed": "2213795",
    "logsBloom": "0x
    "blockHash": "0x99bf15d2fd7808c90fd80315f8019fd1e2185a2d717816afacffe49abffb5c24",
    "transactionHash": "0x89a2d57945343a2dcef1a89f6ebbb08b25726cc5427ffcf8d9cc1ff9d27cc8a4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 25663262,
        "transactionHash": "0x89a2d57945343a2dcef1a89f6ebbb08b25726cc5427ffcf8d9cc1ff9d27cc8a4",
        "address": "0xaeAc3Eec773c6082c9f8a866E01AA45A3B28a9bB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000ba50b9001b2eccd3869cc73c07031dca1e11412"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x99bf15d2fd7808c90fd80315f8019fd1e2185a2d717816afacffe49abffb5c24"
      }
    ],
    "blockNumber": 25663262,
    "cumulativeGasUsed": "2268315",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46DDcC4C6A8C07d7Ef42927bA95396514CBbaD5D"
  ],
  "numDeployments": 1,
  "solcInputHash": "5ffa934390fd75ae03c7e2ad00299cfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_attendaToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"advertiser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ProofSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ProofVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attendaToken\",\"outputs\":[{\"internalType\":\"contract AttendaToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"advertiser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"completeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaign\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"advertiser\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"}],\"internalType\":\"struct CampaignManager.Campaign\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaignParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"getProof\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"watchTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRewarded\",\"type\":\"bool\"}],\"internalType\":\"struct CampaignManager.ProofOfAttention\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCampaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasUserParticipated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"watchTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isVerified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRewarded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"watchTime\",\"type\":\"uint256\"}],\"name\":\"submitProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userParticipated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofId\",\"type\":\"uint256\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages advertising campaigns and proof-of-attention verification\",\"kind\":\"dev\",\"methods\":{\"completeCampaign(uint256)\":{\"details\":\"Complete a campaign (only advertiser)\"},\"createCampaign(string,string,string,uint256,uint256,uint256)\":{\"details\":\"Create a new advertising campaign\"},\"distributeRewards(uint256)\":{\"details\":\"Distribute rewards for verified proofs\"},\"emergencyPause()\":{\"details\":\"Emergency pause for all campaigns (only owner)\"},\"getCampaign(uint256)\":{\"details\":\"Get campaign details\"},\"getCampaignParticipants(uint256)\":{\"details\":\"Get campaign participants\"},\"getProof(uint256)\":{\"details\":\"Get proof details\"},\"getTotalCampaigns()\":{\"details\":\"Get total campaigns count\"},\"getTotalProofs()\":{\"details\":\"Get total proofs count\"},\"hasUserParticipated(uint256,address)\":{\"details\":\"Check if user participated in campaign\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"submitProof(uint256,uint256)\":{\"details\":\"Submit proof of attention for a campaign\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePlatformFee(uint256)\":{\"details\":\"Update platform fee (only owner)\"},\"verifyProof(uint256)\":{\"details\":\"Verify proof of attention (only advertiser)\"}},\"title\":\"CampaignManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CampaignManager.sol\":\"CampaignManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/AttendaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title AttendaToken\\n * @dev ERC20 token for the Attenda MVP system\\n * This token will be used for rewards and payments in the attention economy\\n */\\ncontract AttendaToken is ERC20, Ownable {\\n    uint256 public constant INITIAL_SUPPLY = 1_000_000 * 10**18; // 1 million tokens\\n    uint256 public constant MAX_TEST_MINT = 1000 * 10**18; // 1000 tokens max for testing\\n    \\n    constructor() ERC20(\\\"Attenda Token\\\", \\\"ATT\\\") Ownable() {\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n    \\n    /**\\n     * @dev Mint new tokens (only owner)\\n     * @param to Address to mint tokens to\\n     * @param amount Amount of tokens to mint\\n     */\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n    \\n    /**\\n     * @dev Public minting for testing purposes (anyone can call)\\n     * @param amount Amount of tokens to mint (max 1000 for testing)\\n     */\\n    function mintForTesting(uint256 amount) public {\\n        require(amount <= MAX_TEST_MINT, \\\"Amount exceeds max test mint\\\");\\n        require(balanceOf(msg.sender) == 0, \\\"Already has tokens\\\");\\n        _mint(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev Burn tokens from caller's account\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n    \\n    /**\\n     * @dev Burn tokens from a specific account (only owner)\\n     * @param from Address to burn tokens from\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burnFrom(address from, uint256 amount) public onlyOwner {\\n        _burn(from, amount);\\n    }\\n} \",\"keccak256\":\"0x4d152a516069a2e0b95a6e4bf2939b6fa3093dae2ed50d781dfcf4640758e40d\",\"license\":\"MIT\"},\"contracts/CampaignManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./AttendaToken.sol\\\";\\n\\n/**\\n * @title CampaignManager\\n * @dev Manages advertising campaigns and proof-of-attention verification\\n */\\ncontract CampaignManager is Ownable, ReentrancyGuard {\\n    using Counters for Counters.Counter;\\n    \\n    AttendaToken public attendaToken;\\n    \\n    struct Campaign {\\n        uint256 id;\\n        address advertiser;\\n        string title;\\n        string description;\\n        string ipfsHash;\\n        uint256 rewardAmount;\\n        uint256 maxParticipants;\\n        uint256 currentParticipants;\\n        uint256 duration;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool isActive;\\n        bool isCompleted;\\n    }\\n    \\n    struct ProofOfAttention {\\n        uint256 campaignId;\\n        address user;\\n        uint256 watchTime;\\n        uint256 timestamp;\\n        bool isVerified;\\n        bool isRewarded;\\n    }\\n    \\n    Counters.Counter private _campaignIds;\\n    Counters.Counter private _proofIds;\\n    \\n    mapping(uint256 => Campaign) public campaigns;\\n    mapping(uint256 => ProofOfAttention) public proofs;\\n    mapping(uint256 => mapping(address => bool)) public userParticipated;\\n    mapping(uint256 => address[]) public campaignParticipants;\\n    \\n    uint256 public platformFee = 500; // 5% (500 basis points)\\n    uint256 public constant BASIS_POINTS = 10000;\\n    \\n    event CampaignCreated(uint256 indexed campaignId, address indexed advertiser, string title, uint256 rewardAmount);\\n    event CampaignActivated(uint256 indexed campaignId);\\n    event CampaignCompleted(uint256 indexed campaignId);\\n    event ProofSubmitted(uint256 indexed proofId, uint256 indexed campaignId, address indexed user);\\n    event ProofVerified(uint256 indexed proofId, uint256 indexed campaignId, address indexed user);\\n    event RewardDistributed(uint256 indexed campaignId, address indexed user, uint256 amount);\\n    event PlatformFeeUpdated(uint256 newFee);\\n    \\n    modifier campaignExists(uint256 campaignId) {\\n        require(campaigns[campaignId].id != 0, \\\"Campaign does not exist\\\");\\n        _;\\n    }\\n    \\n    modifier onlyAdvertiser(uint256 campaignId) {\\n        require(campaigns[campaignId].advertiser == msg.sender, \\\"Only advertiser can call this\\\");\\n        _;\\n    }\\n    \\n    modifier campaignActive(uint256 campaignId) {\\n        require(campaigns[campaignId].isActive, \\\"Campaign is not active\\\");\\n        require(block.timestamp >= campaigns[campaignId].startTime, \\\"Campaign has not started\\\");\\n        require(block.timestamp <= campaigns[campaignId].endTime, \\\"Campaign has ended\\\");\\n        _;\\n    }\\n    \\n    constructor(address _attendaToken) Ownable() {\\n        attendaToken = AttendaToken(_attendaToken);\\n    }\\n    \\n    /**\\n     * @dev Create a new advertising campaign\\n     */\\n    function createCampaign(\\n        string memory title,\\n        string memory description,\\n        string memory ipfsHash,\\n        uint256 rewardAmount,\\n        uint256 maxParticipants,\\n        uint256 duration\\n    ) external nonReentrant returns (uint256) {\\n        require(bytes(title).length > 0, \\\"Title cannot be empty\\\");\\n        require(bytes(description).length > 0, \\\"Description cannot be empty\\\");\\n        require(bytes(ipfsHash).length > 0, \\\"IPFS hash cannot be empty\\\");\\n        require(rewardAmount > 0, \\\"Reward amount must be greater than 0\\\");\\n        require(maxParticipants > 0, \\\"Max participants must be greater than 0\\\");\\n        require(duration > 0, \\\"Duration must be greater than 0\\\");\\n        \\n        // Check if advertiser has enough tokens\\n        uint256 totalRequired = rewardAmount * maxParticipants;\\n        require(attendaToken.balanceOf(msg.sender) >= totalRequired, \\\"Insufficient token balance\\\");\\n        \\n        // Transfer tokens to contract\\n        require(attendaToken.transferFrom(msg.sender, address(this), totalRequired), \\\"Token transfer failed\\\");\\n        \\n        _campaignIds.increment();\\n        uint256 campaignId = _campaignIds.current();\\n        \\n        campaigns[campaignId] = Campaign({\\n            id: campaignId,\\n            advertiser: msg.sender,\\n            title: title,\\n            description: description,\\n            ipfsHash: ipfsHash,\\n            rewardAmount: rewardAmount,\\n            maxParticipants: maxParticipants,\\n            currentParticipants: 0,\\n            duration: duration,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + duration,\\n            isActive: true,\\n            isCompleted: false\\n        });\\n        \\n        emit CampaignCreated(campaignId, msg.sender, title, rewardAmount);\\n        return campaignId;\\n    }\\n    \\n    /**\\n     * @dev Submit proof of attention for a campaign\\n     */\\n    function submitProof(\\n        uint256 campaignId,\\n        uint256 watchTime\\n    ) external campaignExists(campaignId) campaignActive(campaignId) nonReentrant {\\n        require(!userParticipated[campaignId][msg.sender], \\\"User already participated\\\");\\n        require(campaigns[campaignId].currentParticipants < campaigns[campaignId].maxParticipants, \\\"Campaign is full\\\");\\n        require(watchTime >= campaigns[campaignId].duration, \\\"Watch time must be at least campaign duration\\\");\\n        \\n        _proofIds.increment();\\n        uint256 proofId = _proofIds.current();\\n        \\n        proofs[proofId] = ProofOfAttention({\\n            campaignId: campaignId,\\n            user: msg.sender,\\n            watchTime: watchTime,\\n            timestamp: block.timestamp,\\n            isVerified: false,\\n            isRewarded: false\\n        });\\n        \\n        userParticipated[campaignId][msg.sender] = true;\\n        campaignParticipants[campaignId].push(msg.sender);\\n        campaigns[campaignId].currentParticipants++;\\n        \\n        emit ProofSubmitted(proofId, campaignId, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Verify proof of attention (only advertiser)\\n     */\\n    function verifyProof(uint256 proofId) external nonReentrant {\\n        require(proofs[proofId].campaignId != 0, \\\"Proof does not exist\\\");\\n        require(!proofs[proofId].isVerified, \\\"Proof already verified\\\");\\n        require(!proofs[proofId].isRewarded, \\\"Proof already rewarded\\\");\\n        \\n        uint256 campaignId = proofs[proofId].campaignId;\\n        require(campaigns[campaignId].advertiser == msg.sender, \\\"Only advertiser can verify\\\");\\n        \\n        proofs[proofId].isVerified = true;\\n        \\n        emit ProofVerified(proofId, campaignId, proofs[proofId].user);\\n    }\\n    \\n    /**\\n     * @dev Distribute rewards for verified proofs\\n     */\\n    function distributeRewards(uint256 proofId) external nonReentrant {\\n        require(proofs[proofId].isVerified, \\\"Proof must be verified first\\\");\\n        require(!proofs[proofId].isRewarded, \\\"Rewards already distributed\\\");\\n        \\n        uint256 campaignId = proofs[proofId].campaignId;\\n        require(campaigns[campaignId].advertiser == msg.sender, \\\"Only advertiser can distribute rewards\\\");\\n        \\n        uint256 rewardAmount = campaigns[campaignId].rewardAmount;\\n        address user = proofs[proofId].user;\\n        \\n        // Calculate platform fee\\n        uint256 platformFeeAmount = (rewardAmount * platformFee) / BASIS_POINTS;\\n        uint256 userReward = rewardAmount - platformFeeAmount;\\n        \\n        // Transfer reward to user\\n        require(attendaToken.transfer(user, userReward), \\\"Reward transfer failed\\\");\\n        \\n        // Transfer platform fee to owner\\n        if (platformFeeAmount > 0) {\\n            require(attendaToken.transfer(owner(), platformFeeAmount), \\\"Platform fee transfer failed\\\");\\n        }\\n        \\n        proofs[proofId].isRewarded = true;\\n        \\n        emit RewardDistributed(campaignId, user, userReward);\\n    }\\n    \\n    /**\\n     * @dev Complete a campaign (only advertiser)\\n     */\\n    function completeCampaign(uint256 campaignId) external campaignExists(campaignId) onlyAdvertiser(campaignId) {\\n        require(campaigns[campaignId].isActive, \\\"Campaign is already inactive\\\");\\n        require(block.timestamp > campaigns[campaignId].endTime, \\\"Campaign has not ended yet\\\");\\n        \\n        campaigns[campaignId].isActive = false;\\n        campaigns[campaignId].isCompleted = true;\\n        \\n        // Refund unused tokens to advertiser\\n        uint256 unusedTokens = campaigns[campaignId].rewardAmount * \\n            (campaigns[campaignId].maxParticipants - campaigns[campaignId].currentParticipants);\\n        \\n        if (unusedTokens > 0) {\\n            require(attendaToken.transfer(msg.sender, unusedTokens), \\\"Refund transfer failed\\\");\\n        }\\n        \\n        emit CampaignCompleted(campaignId);\\n    }\\n    \\n    /**\\n     * @dev Get campaign details\\n     */\\n    function getCampaign(uint256 campaignId) external view returns (Campaign memory) {\\n        return campaigns[campaignId];\\n    }\\n    \\n    /**\\n     * @dev Get proof details\\n     */\\n    function getProof(uint256 proofId) external view returns (ProofOfAttention memory) {\\n        return proofs[proofId];\\n    }\\n    \\n    /**\\n     * @dev Get campaign participants\\n     */\\n    function getCampaignParticipants(uint256 campaignId) external view returns (address[] memory) {\\n        return campaignParticipants[campaignId];\\n    }\\n    \\n    /**\\n     * @dev Check if user participated in campaign\\n     */\\n    function hasUserParticipated(uint256 campaignId, address user) external view returns (bool) {\\n        return userParticipated[campaignId][user];\\n    }\\n    \\n    /**\\n     * @dev Update platform fee (only owner)\\n     */\\n    function updatePlatformFee(uint256 newFee) external onlyOwner {\\n        require(newFee <= 2000, \\\"Platform fee cannot exceed 20%\\\");\\n        platformFee = newFee;\\n        emit PlatformFeeUpdated(newFee);\\n    }\\n    \\n    /**\\n     * @dev Get total campaigns count\\n     */\\n    function getTotalCampaigns() external view returns (uint256) {\\n        return _campaignIds.current();\\n    }\\n    \\n    /**\\n     * @dev Get total proofs count\\n     */\\n    function getTotalProofs() external view returns (uint256) {\\n        return _proofIds.current();\\n    }\\n    \\n    /**\\n     * @dev Emergency pause for all campaigns (only owner)\\n     */\\n    function emergencyPause() external onlyOwner {\\n        for (uint256 i = 1; i <= _campaignIds.current(); i++) {\\n            if (campaigns[i].isActive) {\\n                campaigns[i].isActive = false;\\n            }\\n        }\\n    }\\n} \",\"keccak256\":\"0xbbf3dbd36d55e77352272009bbe1e02603feb12fc998e071320403061d85ac75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526101f46009553480156200001757600080fd5b5060405162002661380380620026618339810160408190526200003a91620000bf565b62000045336200006f565b60018055600280546001600160a01b0319166001600160a01b0392909216919091179055620000f1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000d257600080fd5b81516001600160a01b0381168114620000ea57600080fd5b9392505050565b61256080620001016000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c35780639ddaf5aa1161007c5780639ddaf5aa146103da578063aa0b598814610466578063b5e9349414610479578063e1f1c4a71461048c578063f2fde38b14610495578063fd83cb8e146104a857600080fd5b8063715018a6146103735780638b6958ff1461037b5780638c6ab2381461038e5780638da5cb5b146103ae5780639553f180146103bf5780639b1bc0c9146103d257600080fd5b806327f2b91d1161011557806327f2b91d146102bc57806335abd49b146102cf5780633ad25ebc146102fa57806351858e27146103385780635598f8cc1461034057806359974e381461036057600080fd5b806311149ada14610152578063141961bc1461025c57806316f43dd4146102885780631ec036791461029e57806326232a2e146102b3575b600080fd5b6101ff610160366004611ed6565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600090815260066020908152604091829020825160c0810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260049091015460ff8082161515608084015261010090910416151560a082015290565b6040516102539190815181526020808301516001600160a01b031690820152604080830151908201526060808301519082015260808083015115159082015260a09182015115159181019190915260c00190565b60405180910390f35b61026f61026a366004611ed6565b6104bb565b6040516102539d9c9b9a99989796959493929190611f35565b6102906106c4565b604051908152602001610253565b6102b16102ac366004611fdc565b6106d4565b005b61029060095481565b6102906102ca3660046120a1565b610ae0565b6102e26102dd366004611fdc565b611030565b6040516001600160a01b039091168152602001610253565b610328610308366004612161565b600760209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610253565b6102b1611068565b61035361034e366004611ed6565b6110c5565b604051610253919061218d565b6102b161036e366004611ed6565b61138e565b6102b1611757565b6102b1610389366004611ed6565b61176b565b6103a161039c366004611ed6565b61195c565b6040516102539190612287565b6000546001600160a01b03166102e2565b6102b16103cd366004611ed6565b6119c8565b610290611c90565b61042d6103e8366004611ed6565b6006602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b039092169290919060ff8082169161010090041686565b604080519687526001600160a01b03909516602087015293850192909252606084015215156080830152151560a082015260c001610253565b6102b1610474366004611ed6565b611c9b565b610328610487366004612161565b611d30565b61029061271081565b6102b16104a33660046122d4565b611d5d565b6002546102e2906001600160a01b031681565b60056020526000908152604090208054600182015460028301805492936001600160a01b03909216926104ed906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610519906122f6565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b50505050509080600301805461057b906122f6565b80601f01602080910402602001604051908101604052809291908181526020018280546105a7906122f6565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b505050505090806004018054610609906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610635906122f6565b80156106825780601f1061065757610100808354040283529160200191610682565b820191906000526020600020905b81548152906001019060200180831161066557829003601f168201915b5050505060058301546006840154600785015460088601546009870154600a880154600b90980154969794969395509193909260ff808216916101009004168d565b60006106cf60035490565b905090565b6000828152600560205260408120548391036107315760405162461bcd60e51b815260206004820152601760248201527610d85b5c185a59db88191bd95cc81b9bdd08195e1a5cdd604a1b60448201526064015b60405180910390fd5b6000838152600560205260409020600b0154839060ff1661078d5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e206973206e6f742061637469766560501b6044820152606401610728565b6000818152600560205260409020600901544210156107ee5760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e20686173206e6f74207374617274656400000000000000006044820152606401610728565b6000818152600560205260409020600a01544211156108445760405162461bcd60e51b815260206004820152601260248201527110d85b5c185a59db881a185cc8195b99195960721b6044820152606401610728565b61084c611dd3565b600084815260076020908152604080832033845290915290205460ff16156108b65760405162461bcd60e51b815260206004820152601960248201527f5573657220616c726561647920706172746963697061746564000000000000006044820152606401610728565b600084815260056020526040902060068101546007909101541061090f5760405162461bcd60e51b815260206004820152601060248201526f10d85b5c185a59db881a5cc8199d5b1b60821b6044820152606401610728565b6000848152600560205260409020600801548310156109865760405162461bcd60e51b815260206004820152602d60248201527f57617463682074696d65206d757374206265206174206c656173742063616d7060448201526c30b4b3b710323ab930ba34b7b760991b6064820152608401610728565b610994600480546001019055565b600061099f60045490565b6040805160c0810182528781523360208083018281528385018a8152426060860190815260006080870181815260a088018281528a835260068752898320985189559451600189810180546001600160a01b03939093166001600160a01b0319938416179055945160028a0155925160038901555160049097018054945115156101000261ff00199815159890981661ffff1990951694909417969096179092558b855260078084528686208587528452868620805460ff1916831790558c8652600884528686208054928301815586528386209091018054909216909317905589835260059052918120909101805492935090610a9c83612346565b90915550506040513390869083907f10c713ee1fb0193f787278bc11d85253a8ab0e3d53ddc4c0ffb03e9082db3ce190600090a450610ada60018055565b50505050565b6000610aea611dd3565b6000875111610b335760405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606401610728565b6000865111610b845760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006044820152606401610728565b6000855111610bd55760405162461bcd60e51b815260206004820152601960248201527f4950465320686173682063616e6e6f7420626520656d707479000000000000006044820152606401610728565b60008411610c315760405162461bcd60e51b8152602060048201526024808201527f52657761726420616d6f756e74206d75737420626520677265617465722074686044820152630616e20360e41b6064820152608401610728565b60008311610c915760405162461bcd60e51b815260206004820152602760248201527f4d6178207061727469636970616e7473206d75737420626520677265617465726044820152660207468616e20360cc1b6064820152608401610728565b60008211610ce15760405162461bcd60e51b815260206004820152601f60248201527f4475726174696f6e206d7573742062652067726561746572207468616e2030006044820152606401610728565b6000610ced848661235f565b6002546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190612376565b1015610dac5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610728565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e27919061238f565b610e6b5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610728565b610e79600380546001019055565b6000610e8460035490565b9050604051806101a00160405280828152602001336001600160a01b031681526020018a8152602001898152602001888152602001878152602001868152602001600081526020018581526020014281526020018542610ee491906123b1565b8152600160208083018290526000604093840181905285815260058252839020845181559084015191810180546001600160a01b0319166001600160a01b0390931692909217909155908201516002820190610f409082612413565b5060608201516003820190610f559082612413565b5060808201516004820190610f6a9082612413565b5060a0820151600582015560c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b90920180546101809094015161ffff1990941692151561ff0019169290921792151502919091179055604051339082907f825fb10f7650ed27414d6f86acdf7d5946927d9b25001f045f1a2435deec02fe90611012908d908b906124d3565b60405180910390a391505061102660018055565b9695505050505050565b6008602052816000526040600020818154811061104c57600080fd5b6000918252602090912001546001600160a01b03169150829050565b611070611e2c565b60015b60035481116110c2576000818152600560205260409020600b015460ff16156110b0576000818152600560205260409020600b01805460ff191690555b806110ba81612346565b915050611073565b50565b61113d604051806101a001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60008281526005602090815260409182902082516101a0810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191611188906122f6565b80601f01602080910402602001604051908101604052809291908181526020018280546111b4906122f6565b80156112015780601f106111d657610100808354040283529160200191611201565b820191906000526020600020905b8154815290600101906020018083116111e457829003601f168201915b5050505050815260200160038201805461121a906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611246906122f6565b80156112935780601f1061126857610100808354040283529160200191611293565b820191906000526020600020905b81548152906001019060200180831161127657829003601f168201915b505050505081526020016004820180546112ac906122f6565b80601f01602080910402602001604051908101604052809291908181526020018280546112d8906122f6565b80156113255780601f106112fa57610100808354040283529160200191611325565b820191906000526020600020905b81548152906001019060200180831161130857829003601f168201915b505050918352505060058201546020820152600682015460408201526007820154606082015260088201546080820152600982015460a0820152600a82015460c0820152600b9091015460ff808216151560e08401526101009182900416151591015292915050565b611396611dd3565b60008181526006602052604090206004015460ff166113f75760405162461bcd60e51b815260206004820152601c60248201527f50726f6f66206d757374206265207665726966696564206669727374000000006044820152606401610728565b600081815260066020526040902060040154610100900460ff161561145e5760405162461bcd60e51b815260206004820152601b60248201527f5265776172647320616c726561647920646973747269627574656400000000006044820152606401610728565b6000818152600660209081526040808320548084526005909252909120600101546001600160a01b031633146114e55760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920616476657274697365722063616e2064697374726962757465207260448201526565776172647360d01b6064820152608401610728565b60008181526005602081815260408084209092015485845260069091529082206001015460095491926001600160a01b039091169161271090611528908561235f565b61153291906124f5565b905060006115408285612517565b60025460405163a9059cbb60e01b81526001600160a01b0386811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b9919061238f565b6115fe5760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610728565b81156116e4576002546001600160a01b031663a9059cbb6116276000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015611674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611698919061238f565b6116e45760405162461bcd60e51b815260206004820152601c60248201527f506c6174666f726d20666565207472616e73666572206661696c6564000000006044820152606401610728565b60008681526006602052604090819020600401805461ff001916610100179055516001600160a01b0384169086907fab7542bafced3da2d8c881cb2dd1de859fac7c20d3650d2902ad389a64e08883906117419085815260200190565b60405180910390a350505050506110c260018055565b61175f611e2c565b6117696000611e86565b565b611773611dd3565b60008181526006602052604081205490036117c75760405162461bcd60e51b8152602060048201526014602482015273141c9bdbd988191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610728565b60008181526006602052604090206004015460ff16156118225760405162461bcd60e51b8152602060048201526016602482015275141c9bdbd988185b1c9958591e481d995c9a599a595960521b6044820152606401610728565b600081815260066020526040902060040154610100900460ff16156118825760405162461bcd60e51b8152602060048201526016602482015275141c9bdbd988185b1c9958591e481c995dd85c99195960521b6044820152606401610728565b6000818152600660209081526040808320548084526005909252909120600101546001600160a01b031633146118fa5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c7920616476657274697365722063616e207665726966790000000000006044820152606401610728565b60008281526006602052604080822060048101805460ff19166001908117909155015490516001600160a01b0390911691839185917f81389babe742afad96360fca3b5938036a4e3cc2fa98103a7e7e25ffe2ecaaf291a4506110c260018055565b6000818152600860209081526040918290208054835181840281018401909452808452606093928301828280156119bc57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161199e575b50505050509050919050565b600081815260056020526040812054829103611a205760405162461bcd60e51b815260206004820152601760248201527610d85b5c185a59db88191bd95cc81b9bdd08195e1a5cdd604a1b6044820152606401610728565b60008281526005602052604090206001015482906001600160a01b03163314611a8b5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c7920616476657274697365722063616e2063616c6c20746869730000006044820152606401610728565b6000838152600560205260409020600b015460ff16611aec5760405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e20697320616c726561647920696e616374697665000000006044820152606401610728565b6000838152600560205260409020600a01544211611b4c5760405162461bcd60e51b815260206004820152601a60248201527f43616d706169676e20686173206e6f7420656e646564207965740000000000006044820152606401610728565b6000838152600560205260408120600b8101805461ffff19166101001790556007810154600690910154611b809190612517565b60008581526005602081905260409091200154611b9d919061235f565b90508015611c5f5760025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a919061238f565b611c5f5760405162461bcd60e51b81526020600482015260166024820152751499599d5b99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610728565b60405184907fbdef6a2e3aa892961a2dab48272f72f2bc1c7121eb1c0ed7e4a58e081c1e4be090600090a250505050565b60006106cf60045490565b611ca3611e2c565b6107d0811115611cf55760405162461bcd60e51b815260206004820152601e60248201527f506c6174666f726d206665652063616e6e6f74206578636565642032302500006044820152606401610728565b60098190556040518181527f45610d581145924dd7090a5017e5f2b1d6f42213bb2e95707ff86846bbfcb1ca9060200160405180910390a150565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b611d65611e2c565b6001600160a01b038116611dca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610728565b6110c281611e86565b600260015403611e255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610728565b6002600155565b6000546001600160a01b031633146117695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610728565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215611ee857600080fd5b5035919050565b6000815180845260005b81811015611f1557602081850181015186830182015201611ef9565b506000602082860101526020601f19601f83011685010191505092915050565b8d81526001600160a01b038d1660208201526101a060408201819052600090611f608382018f611eef565b90508281036060840152611f74818e611eef565b90508281036080840152611f88818d611eef565b9150508960a08301528860c08301528760e0830152866101008301528561012083015284610140830152611fc161016083018515159052565b8215156101808301529e9d5050505050505050505050505050565b60008060408385031215611fef57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261202557600080fd5b813567ffffffffffffffff8082111561204057612040611ffe565b604051601f8301601f19908116603f0116810190828211818310171561206857612068611ffe565b8160405283815286602085880101111561208157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156120ba57600080fd5b863567ffffffffffffffff808211156120d257600080fd5b6120de8a838b01612014565b975060208901359150808211156120f457600080fd5b6121008a838b01612014565b9650604089013591508082111561211657600080fd5b5061212389828a01612014565b945050606087013592506080870135915060a087013590509295509295509295565b80356001600160a01b038116811461215c57600080fd5b919050565b6000806040838503121561217457600080fd5b8235915061218460208401612145565b90509250929050565b6020815281516020820152600060208301516121b460408401826001600160a01b03169052565b5060408301516101a08060608501526121d16101c0850183611eef565b91506060850151601f19808685030160808701526121ef8483611eef565b935060808701519150808685030160a08701525061220d8382611eef565b92505060a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101806122758187018315159052565b90950151151593019290925250919050565b6020808252825182820181905260009190848201906040850190845b818110156122c85783516001600160a01b0316835292840192918401916001016122a3565b50909695505050505050565b6000602082840312156122e657600080fd5b6122ef82612145565b9392505050565b600181811c9082168061230a57607f821691505b60208210810361232a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161235857612358612330565b5060010190565b8082028115828204841417611d5757611d57612330565b60006020828403121561238857600080fd5b5051919050565b6000602082840312156123a157600080fd5b815180151581146122ef57600080fd5b80820180821115611d5757611d57612330565b601f82111561240e57600081815260208120601f850160051c810160208610156123eb5750805b601f850160051c820191505b8181101561240a578281556001016123f7565b5050505b505050565b815167ffffffffffffffff81111561242d5761242d611ffe565b6124418161243b84546122f6565b846123c4565b602080601f831160018114612476576000841561245e5750858301515b600019600386901b1c1916600185901b17855561240a565b600085815260208120601f198616915b828110156124a557888601518255948401946001909101908401612486565b50858210156124c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006124e66040830185611eef565b90508260208301529392505050565b60008261251257634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611d5757611d5761233056fea2646970667358221220e0791e13155f32933c5b8c4328c5b44cbdb271f86a51b788bf206538d98f469964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c35780639ddaf5aa1161007c5780639ddaf5aa146103da578063aa0b598814610466578063b5e9349414610479578063e1f1c4a71461048c578063f2fde38b14610495578063fd83cb8e146104a857600080fd5b8063715018a6146103735780638b6958ff1461037b5780638c6ab2381461038e5780638da5cb5b146103ae5780639553f180146103bf5780639b1bc0c9146103d257600080fd5b806327f2b91d1161011557806327f2b91d146102bc57806335abd49b146102cf5780633ad25ebc146102fa57806351858e27146103385780635598f8cc1461034057806359974e381461036057600080fd5b806311149ada14610152578063141961bc1461025c57806316f43dd4146102885780631ec036791461029e57806326232a2e146102b3575b600080fd5b6101ff610160366004611ed6565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915250600090815260066020908152604091829020825160c0810184528154815260018201546001600160a01b0316928101929092526002810154928201929092526003820154606082015260049091015460ff8082161515608084015261010090910416151560a082015290565b6040516102539190815181526020808301516001600160a01b031690820152604080830151908201526060808301519082015260808083015115159082015260a09182015115159181019190915260c00190565b60405180910390f35b61026f61026a366004611ed6565b6104bb565b6040516102539d9c9b9a99989796959493929190611f35565b6102906106c4565b604051908152602001610253565b6102b16102ac366004611fdc565b6106d4565b005b61029060095481565b6102906102ca3660046120a1565b610ae0565b6102e26102dd366004611fdc565b611030565b6040516001600160a01b039091168152602001610253565b610328610308366004612161565b600760209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610253565b6102b1611068565b61035361034e366004611ed6565b6110c5565b604051610253919061218d565b6102b161036e366004611ed6565b61138e565b6102b1611757565b6102b1610389366004611ed6565b61176b565b6103a161039c366004611ed6565b61195c565b6040516102539190612287565b6000546001600160a01b03166102e2565b6102b16103cd366004611ed6565b6119c8565b610290611c90565b61042d6103e8366004611ed6565b6006602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b039092169290919060ff8082169161010090041686565b604080519687526001600160a01b03909516602087015293850192909252606084015215156080830152151560a082015260c001610253565b6102b1610474366004611ed6565b611c9b565b610328610487366004612161565b611d30565b61029061271081565b6102b16104a33660046122d4565b611d5d565b6002546102e2906001600160a01b031681565b60056020526000908152604090208054600182015460028301805492936001600160a01b03909216926104ed906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610519906122f6565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b50505050509080600301805461057b906122f6565b80601f01602080910402602001604051908101604052809291908181526020018280546105a7906122f6565b80156105f45780601f106105c9576101008083540402835291602001916105f4565b820191906000526020600020905b8154815290600101906020018083116105d757829003601f168201915b505050505090806004018054610609906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610635906122f6565b80156106825780601f1061065757610100808354040283529160200191610682565b820191906000526020600020905b81548152906001019060200180831161066557829003601f168201915b5050505060058301546006840154600785015460088601546009870154600a880154600b90980154969794969395509193909260ff808216916101009004168d565b60006106cf60035490565b905090565b6000828152600560205260408120548391036107315760405162461bcd60e51b815260206004820152601760248201527610d85b5c185a59db88191bd95cc81b9bdd08195e1a5cdd604a1b60448201526064015b60405180910390fd5b6000838152600560205260409020600b0154839060ff1661078d5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e206973206e6f742061637469766560501b6044820152606401610728565b6000818152600560205260409020600901544210156107ee5760405162461bcd60e51b815260206004820152601860248201527f43616d706169676e20686173206e6f74207374617274656400000000000000006044820152606401610728565b6000818152600560205260409020600a01544211156108445760405162461bcd60e51b815260206004820152601260248201527110d85b5c185a59db881a185cc8195b99195960721b6044820152606401610728565b61084c611dd3565b600084815260076020908152604080832033845290915290205460ff16156108b65760405162461bcd60e51b815260206004820152601960248201527f5573657220616c726561647920706172746963697061746564000000000000006044820152606401610728565b600084815260056020526040902060068101546007909101541061090f5760405162461bcd60e51b815260206004820152601060248201526f10d85b5c185a59db881a5cc8199d5b1b60821b6044820152606401610728565b6000848152600560205260409020600801548310156109865760405162461bcd60e51b815260206004820152602d60248201527f57617463682074696d65206d757374206265206174206c656173742063616d7060448201526c30b4b3b710323ab930ba34b7b760991b6064820152608401610728565b610994600480546001019055565b600061099f60045490565b6040805160c0810182528781523360208083018281528385018a8152426060860190815260006080870181815260a088018281528a835260068752898320985189559451600189810180546001600160a01b03939093166001600160a01b0319938416179055945160028a0155925160038901555160049097018054945115156101000261ff00199815159890981661ffff1990951694909417969096179092558b855260078084528686208587528452868620805460ff1916831790558c8652600884528686208054928301815586528386209091018054909216909317905589835260059052918120909101805492935090610a9c83612346565b90915550506040513390869083907f10c713ee1fb0193f787278bc11d85253a8ab0e3d53ddc4c0ffb03e9082db3ce190600090a450610ada60018055565b50505050565b6000610aea611dd3565b6000875111610b335760405162461bcd60e51b81526020600482015260156024820152745469746c652063616e6e6f7420626520656d70747960581b6044820152606401610728565b6000865111610b845760405162461bcd60e51b815260206004820152601b60248201527f4465736372697074696f6e2063616e6e6f7420626520656d70747900000000006044820152606401610728565b6000855111610bd55760405162461bcd60e51b815260206004820152601960248201527f4950465320686173682063616e6e6f7420626520656d707479000000000000006044820152606401610728565b60008411610c315760405162461bcd60e51b8152602060048201526024808201527f52657761726420616d6f756e74206d75737420626520677265617465722074686044820152630616e20360e41b6064820152608401610728565b60008311610c915760405162461bcd60e51b815260206004820152602760248201527f4d6178207061727469636970616e7473206d75737420626520677265617465726044820152660207468616e20360cc1b6064820152608401610728565b60008211610ce15760405162461bcd60e51b815260206004820152601f60248201527f4475726174696f6e206d7573742062652067726561746572207468616e2030006044820152606401610728565b6000610ced848661235f565b6002546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e9190612376565b1015610dac5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420746f6b656e2062616c616e63650000000000006044820152606401610728565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e27919061238f565b610e6b5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606401610728565b610e79600380546001019055565b6000610e8460035490565b9050604051806101a00160405280828152602001336001600160a01b031681526020018a8152602001898152602001888152602001878152602001868152602001600081526020018581526020014281526020018542610ee491906123b1565b8152600160208083018290526000604093840181905285815260058252839020845181559084015191810180546001600160a01b0319166001600160a01b0390931692909217909155908201516002820190610f409082612413565b5060608201516003820190610f559082612413565b5060808201516004820190610f6a9082612413565b5060a0820151600582015560c0820151600682015560e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b90920180546101809094015161ffff1990941692151561ff0019169290921792151502919091179055604051339082907f825fb10f7650ed27414d6f86acdf7d5946927d9b25001f045f1a2435deec02fe90611012908d908b906124d3565b60405180910390a391505061102660018055565b9695505050505050565b6008602052816000526040600020818154811061104c57600080fd5b6000918252602090912001546001600160a01b03169150829050565b611070611e2c565b60015b60035481116110c2576000818152600560205260409020600b015460ff16156110b0576000818152600560205260409020600b01805460ff191690555b806110ba81612346565b915050611073565b50565b61113d604051806101a001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b60008281526005602090815260409182902082516101a0810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191611188906122f6565b80601f01602080910402602001604051908101604052809291908181526020018280546111b4906122f6565b80156112015780601f106111d657610100808354040283529160200191611201565b820191906000526020600020905b8154815290600101906020018083116111e457829003601f168201915b5050505050815260200160038201805461121a906122f6565b80601f0160208091040260200160405190810160405280929190818152602001828054611246906122f6565b80156112935780601f1061126857610100808354040283529160200191611293565b820191906000526020600020905b81548152906001019060200180831161127657829003601f168201915b505050505081526020016004820180546112ac906122f6565b80601f01602080910402602001604051908101604052809291908181526020018280546112d8906122f6565b80156113255780601f106112fa57610100808354040283529160200191611325565b820191906000526020600020905b81548152906001019060200180831161130857829003601f168201915b505050918352505060058201546020820152600682015460408201526007820154606082015260088201546080820152600982015460a0820152600a82015460c0820152600b9091015460ff808216151560e08401526101009182900416151591015292915050565b611396611dd3565b60008181526006602052604090206004015460ff166113f75760405162461bcd60e51b815260206004820152601c60248201527f50726f6f66206d757374206265207665726966696564206669727374000000006044820152606401610728565b600081815260066020526040902060040154610100900460ff161561145e5760405162461bcd60e51b815260206004820152601b60248201527f5265776172647320616c726561647920646973747269627574656400000000006044820152606401610728565b6000818152600660209081526040808320548084526005909252909120600101546001600160a01b031633146114e55760405162461bcd60e51b815260206004820152602660248201527f4f6e6c7920616476657274697365722063616e2064697374726962757465207260448201526565776172647360d01b6064820152608401610728565b60008181526005602081815260408084209092015485845260069091529082206001015460095491926001600160a01b039091169161271090611528908561235f565b61153291906124f5565b905060006115408285612517565b60025460405163a9059cbb60e01b81526001600160a01b0386811660048301526024820184905292935091169063a9059cbb906044016020604051808303816000875af1158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b9919061238f565b6115fe5760405162461bcd60e51b815260206004820152601660248201527514995dd85c99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610728565b81156116e4576002546001600160a01b031663a9059cbb6116276000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015611674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611698919061238f565b6116e45760405162461bcd60e51b815260206004820152601c60248201527f506c6174666f726d20666565207472616e73666572206661696c6564000000006044820152606401610728565b60008681526006602052604090819020600401805461ff001916610100179055516001600160a01b0384169086907fab7542bafced3da2d8c881cb2dd1de859fac7c20d3650d2902ad389a64e08883906117419085815260200190565b60405180910390a350505050506110c260018055565b61175f611e2c565b6117696000611e86565b565b611773611dd3565b60008181526006602052604081205490036117c75760405162461bcd60e51b8152602060048201526014602482015273141c9bdbd988191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610728565b60008181526006602052604090206004015460ff16156118225760405162461bcd60e51b8152602060048201526016602482015275141c9bdbd988185b1c9958591e481d995c9a599a595960521b6044820152606401610728565b600081815260066020526040902060040154610100900460ff16156118825760405162461bcd60e51b8152602060048201526016602482015275141c9bdbd988185b1c9958591e481c995dd85c99195960521b6044820152606401610728565b6000818152600660209081526040808320548084526005909252909120600101546001600160a01b031633146118fa5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c7920616476657274697365722063616e207665726966790000000000006044820152606401610728565b60008281526006602052604080822060048101805460ff19166001908117909155015490516001600160a01b0390911691839185917f81389babe742afad96360fca3b5938036a4e3cc2fa98103a7e7e25ffe2ecaaf291a4506110c260018055565b6000818152600860209081526040918290208054835181840281018401909452808452606093928301828280156119bc57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161199e575b50505050509050919050565b600081815260056020526040812054829103611a205760405162461bcd60e51b815260206004820152601760248201527610d85b5c185a59db88191bd95cc81b9bdd08195e1a5cdd604a1b6044820152606401610728565b60008281526005602052604090206001015482906001600160a01b03163314611a8b5760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c7920616476657274697365722063616e2063616c6c20746869730000006044820152606401610728565b6000838152600560205260409020600b015460ff16611aec5760405162461bcd60e51b815260206004820152601c60248201527f43616d706169676e20697320616c726561647920696e616374697665000000006044820152606401610728565b6000838152600560205260409020600a01544211611b4c5760405162461bcd60e51b815260206004820152601a60248201527f43616d706169676e20686173206e6f7420656e646564207965740000000000006044820152606401610728565b6000838152600560205260408120600b8101805461ffff19166101001790556007810154600690910154611b809190612517565b60008581526005602081905260409091200154611b9d919061235f565b90508015611c5f5760025460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a919061238f565b611c5f5760405162461bcd60e51b81526020600482015260166024820152751499599d5b99081d1c985b9cd9995c8819985a5b195960521b6044820152606401610728565b60405184907fbdef6a2e3aa892961a2dab48272f72f2bc1c7121eb1c0ed7e4a58e081c1e4be090600090a250505050565b60006106cf60045490565b611ca3611e2c565b6107d0811115611cf55760405162461bcd60e51b815260206004820152601e60248201527f506c6174666f726d206665652063616e6e6f74206578636565642032302500006044820152606401610728565b60098190556040518181527f45610d581145924dd7090a5017e5f2b1d6f42213bb2e95707ff86846bbfcb1ca9060200160405180910390a150565b60008281526007602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b611d65611e2c565b6001600160a01b038116611dca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610728565b6110c281611e86565b600260015403611e255760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610728565b6002600155565b6000546001600160a01b031633146117695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610728565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215611ee857600080fd5b5035919050565b6000815180845260005b81811015611f1557602081850181015186830182015201611ef9565b506000602082860101526020601f19601f83011685010191505092915050565b8d81526001600160a01b038d1660208201526101a060408201819052600090611f608382018f611eef565b90508281036060840152611f74818e611eef565b90508281036080840152611f88818d611eef565b9150508960a08301528860c08301528760e0830152866101008301528561012083015284610140830152611fc161016083018515159052565b8215156101808301529e9d5050505050505050505050505050565b60008060408385031215611fef57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261202557600080fd5b813567ffffffffffffffff8082111561204057612040611ffe565b604051601f8301601f19908116603f0116810190828211818310171561206857612068611ffe565b8160405283815286602085880101111561208157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c087890312156120ba57600080fd5b863567ffffffffffffffff808211156120d257600080fd5b6120de8a838b01612014565b975060208901359150808211156120f457600080fd5b6121008a838b01612014565b9650604089013591508082111561211657600080fd5b5061212389828a01612014565b945050606087013592506080870135915060a087013590509295509295509295565b80356001600160a01b038116811461215c57600080fd5b919050565b6000806040838503121561217457600080fd5b8235915061218460208401612145565b90509250929050565b6020815281516020820152600060208301516121b460408401826001600160a01b03169052565b5060408301516101a08060608501526121d16101c0850183611eef565b91506060850151601f19808685030160808701526121ef8483611eef565b935060808701519150808685030160a08701525061220d8382611eef565b92505060a085015160c085015260c085015160e085015260e08501516101008181870152808701519150506101208181870152808701519150506101408181870152808701519150506101608181870152808701519150506101806122758187018315159052565b90950151151593019290925250919050565b6020808252825182820181905260009190848201906040850190845b818110156122c85783516001600160a01b0316835292840192918401916001016122a3565b50909695505050505050565b6000602082840312156122e657600080fd5b6122ef82612145565b9392505050565b600181811c9082168061230a57607f821691505b60208210810361232a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161235857612358612330565b5060010190565b8082028115828204841417611d5757611d57612330565b60006020828403121561238857600080fd5b5051919050565b6000602082840312156123a157600080fd5b815180151581146122ef57600080fd5b80820180821115611d5757611d57612330565b601f82111561240e57600081815260208120601f850160051c810160208610156123eb5750805b601f850160051c820191505b8181101561240a578281556001016123f7565b5050505b505050565b815167ffffffffffffffff81111561242d5761242d611ffe565b6124418161243b84546122f6565b846123c4565b602080601f831160018114612476576000841561245e5750858301515b600019600386901b1c1916600185901b17855561240a565b600085815260208120601f198616915b828110156124a557888601518255948401946001909101908401612486565b50858210156124c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006124e66040830185611eef565b90508260208301529392505050565b60008261251257634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115611d5757611d5761233056fea2646970667358221220e0791e13155f32933c5b8c4328c5b44cbdb271f86a51b788bf206538d98f469964736f6c63430008110033",
  "devdoc": {
    "details": "Manages advertising campaigns and proof-of-attention verification",
    "kind": "dev",
    "methods": {
      "completeCampaign(uint256)": {
        "details": "Complete a campaign (only advertiser)"
      },
      "createCampaign(string,string,string,uint256,uint256,uint256)": {
        "details": "Create a new advertising campaign"
      },
      "distributeRewards(uint256)": {
        "details": "Distribute rewards for verified proofs"
      },
      "emergencyPause()": {
        "details": "Emergency pause for all campaigns (only owner)"
      },
      "getCampaign(uint256)": {
        "details": "Get campaign details"
      },
      "getCampaignParticipants(uint256)": {
        "details": "Get campaign participants"
      },
      "getProof(uint256)": {
        "details": "Get proof details"
      },
      "getTotalCampaigns()": {
        "details": "Get total campaigns count"
      },
      "getTotalProofs()": {
        "details": "Get total proofs count"
      },
      "hasUserParticipated(uint256,address)": {
        "details": "Check if user participated in campaign"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "submitProof(uint256,uint256)": {
        "details": "Submit proof of attention for a campaign"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePlatformFee(uint256)": {
        "details": "Update platform fee (only owner)"
      },
      "verifyProof(uint256)": {
        "details": "Verify proof of attention (only advertiser)"
      }
    },
    "title": "CampaignManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1096,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "attendaToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AttendaToken)1078"
      },
      {
        "astId": 1139,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "_campaignIds",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)895_storage"
      },
      {
        "astId": 1142,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "_proofIds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)895_storage"
      },
      {
        "astId": 1147,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "campaigns",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Campaign)1123_storage)"
      },
      {
        "astId": 1152,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "proofs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ProofOfAttention)1136_storage)"
      },
      {
        "astId": 1158,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "userParticipated",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1163,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "campaignParticipants",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1166,
        "contract": "contracts/CampaignManager.sol:CampaignManager",
        "label": "platformFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AttendaToken)1078": {
        "encoding": "inplace",
        "label": "contract AttendaToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Campaign)1123_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CampaignManager.Campaign)",
        "numberOfBytes": "32",
        "value": "t_struct(Campaign)1123_storage"
      },
      "t_mapping(t_uint256,t_struct(ProofOfAttention)1136_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CampaignManager.ProofOfAttention)",
        "numberOfBytes": "32",
        "value": "t_struct(ProofOfAttention)1136_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Campaign)1123_storage": {
        "encoding": "inplace",
        "label": "struct CampaignManager.Campaign",
        "members": [
          {
            "astId": 1098,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1100,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "advertiser",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1102,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1104,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1106,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 1108,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "rewardAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1110,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "maxParticipants",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1112,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "currentParticipants",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1114,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "duration",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1116,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "startTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1118,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "endTime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1120,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "isActive",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 1122,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "isCompleted",
            "offset": 1,
            "slot": "11",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Counter)895_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 894,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(ProofOfAttention)1136_storage": {
        "encoding": "inplace",
        "label": "struct CampaignManager.ProofOfAttention",
        "members": [
          {
            "astId": 1125,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "campaignId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1127,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "user",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1129,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "watchTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1131,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1133,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "isVerified",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1135,
            "contract": "contracts/CampaignManager.sol:CampaignManager",
            "label": "isRewarded",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}